name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: sharp-server
  ECS_CLUSTER: sharp-server-cluster
  ECS_SERVICE: sharp-server-service
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: sharp-server
  ECS_EXECUTION_ROLE_ARN: ""
  ECS_TASK_ROLE_ARN: ""
  LOG_GROUP_NAME: "/ecs/sharp-server"

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}

      - name: Create ECS IAM roles if not exist
        run: |
          # ECS 실행 역할 생성 또는 가져오기
          EXECUTION_ROLE_NAME="ecsTaskExecutionRole"
          EXECUTION_ROLE_ARN=$(aws iam get-role --role-name ${EXECUTION_ROLE_NAME} --query 'Role.Arn' --output text 2>/dev/null || echo "")
          
          if [ -z "$EXECUTION_ROLE_ARN" ]; then
            echo "Creating ECS execution role..."
            EXECUTION_ROLE_ARN=$(aws iam create-role \
              --role-name ${EXECUTION_ROLE_NAME} \
              --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
              --query 'Role.Arn' --output text)
            
            aws iam attach-role-policy \
              --role-name ${EXECUTION_ROLE_NAME} \
              --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          fi
          
          # CloudWatch Logs 정책 추가
          aws iam attach-role-policy \
            --role-name ${EXECUTION_ROLE_NAME} \
            --policy-arn arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
          
          # ECS 태스크 역할 생성 또는 가져오기
          TASK_ROLE_NAME="ecsTaskRole"
          TASK_ROLE_ARN=$(aws iam get-role --role-name ${TASK_ROLE_NAME} --query 'Role.Arn' --output text 2>/dev/null || echo "")
          
          if [ -z "$TASK_ROLE_ARN" ]; then
            echo "Creating ECS task role..."
            TASK_ROLE_ARN=$(aws iam create-role \
              --role-name ${TASK_ROLE_NAME} \
              --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}' \
              --query 'Role.Arn' --output text)
            
            aws iam attach-role-policy \
              --role-name ${TASK_ROLE_NAME} \
              --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess
          fi
          
          echo "ECS_EXECUTION_ROLE_ARN=${EXECUTION_ROLE_ARN}" >> $GITHUB_ENV
          echo "ECS_TASK_ROLE_ARN=${TASK_ROLE_ARN}" >> $GITHUB_ENV

      - name: Ensure required IAM permissions
        run: |
          # GitHub Actions 사용자에게 필요한 권한 확인
          echo "Checking IAM permissions for NLB and ECS operations..."
          
          # 필요한 권한 목록
          REQUIRED_PERMISSIONS=(
            "elasticloadbalancing:CreateLoadBalancer"
            "elasticloadbalancing:CreateTargetGroup"
            "elasticloadbalancing:CreateListener"
            "elasticloadbalancing:DescribeLoadBalancers"
            "elasticloadbalancing:DescribeTargetGroups"
            "elasticloadbalancing:DescribeListeners"
            "elasticloadbalancing:RegisterTargets"
            "elasticloadbalancing:ModifyTargetGroup"
            "elasticloadbalancing:ModifyTargetGroupAttributes"
            "ec2:DescribeSubnets"
            "ec2:DescribeVpcs"
            "ec2:DescribeSecurityGroups"
            "ec2:CreateSecurityGroup"
            "ec2:AuthorizeSecurityGroupIngress"
            "ec2:DescribeNetworkInterfaces"
          )
          
          # 권한 확인 (실제로는 확인할 수 없으므로 안내 메시지만 출력)
          echo "The following permissions are required for NLB creation and management:"
          for perm in "${REQUIRED_PERMISSIONS[@]}"; do
            echo "- $perm"
          done
          
          echo "If you encounter permission errors, please ensure your AWS credentials have these permissions."
          echo "You may need to attach the following managed policies to your IAM user or role:"
          echo "- AmazonEC2FullAccess"
          echo "- ElasticLoadBalancingFullAccess"
          echo "- AmazonECS-FullAccess"

      - name: Create ECS cluster
        run: |
          # 클러스터 존재 여부 확인
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${ECS_CLUSTER} --query 'clusters[0].clusterName' --output text 2>/dev/null || echo "")
          
          if [ "$CLUSTER_EXISTS" == "None" ] || [ -z "$CLUSTER_EXISTS" ]; then
            echo "Creating ECS cluster: ${ECS_CLUSTER}"
            aws ecs create-cluster --cluster-name ${ECS_CLUSTER}
          else
            echo "ECS cluster already exists: ${CLUSTER_EXISTS}"
          fi
          
          # 클러스터가 생성되었는지 확인
          CLUSTER_CHECK=$(aws ecs describe-clusters --clusters ${ECS_CLUSTER} --query 'clusters[0].clusterName' --output text)
          echo "Confirmed ECS cluster: ${CLUSTER_CHECK}"

      - name: Create and verify CloudWatch Logs group
        run: |
          # 로그 그룹 생성 (이미 존재하면 오류 무시)
          aws logs create-log-group --log-group-name ${LOG_GROUP_NAME} || true
          
          # 로그 그룹이 생성되었는지 확인
          LOG_GROUP_CHECK=$(aws logs describe-log-groups --log-group-name-prefix ${LOG_GROUP_NAME} --query 'logGroups[0].logGroupName' --output text)
          
          if [ "$LOG_GROUP_CHECK" == "None" ] || [ -z "$LOG_GROUP_CHECK" ]; then
            echo "Error: Failed to create log group ${LOG_GROUP_NAME}"
            exit 1
          else
            echo "Confirmed log group exists: ${LOG_GROUP_CHECK}"
          fi
          
          # 로그 스트림 생성 (선택 사항이지만 권한 테스트를 위해 추가)
          TEST_STREAM_NAME="github-action-test-$(date +%s)"
          aws logs create-log-stream --log-group-name ${LOG_GROUP_NAME} --log-stream-name ${TEST_STREAM_NAME}
          echo "Created test log stream: ${TEST_STREAM_NAME}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          HTTP_SSL_CERT: ${{ secrets.HTTP_SSL_CERT }}
          HTTP_SSL_KEY: ${{ secrets.HTTP_SSL_KEY }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg HTTP_SSL_CERT="$HTTP_SSL_CERT" \
            --build-arg HTTP_SSL_KEY="$HTTP_SSL_KEY" .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update task definition
        run: |
          # task-definition.json 파일에서 변수 대체
          sed -i "s|\${ECS_EXECUTION_ROLE_ARN}|${ECS_EXECUTION_ROLE_ARN}|g" ${ECS_TASK_DEFINITION}
          sed -i "s|\${ECS_TASK_ROLE_ARN}|${ECS_TASK_ROLE_ARN}|g" ${ECS_TASK_DEFINITION}
          sed -i "s|\${ECR_REPOSITORY_URI}|${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}|g" ${ECS_TASK_DEFINITION}
          sed -i "s|\${IMAGE_TAG}|${GITHUB_SHA}|g" ${ECS_TASK_DEFINITION}
          sed -i "s|\${AWS_REGION}|${AWS_REGION}|g" ${ECS_TASK_DEFINITION}
          sed -i "s|\${LOG_GROUP_NAME}|${LOG_GROUP_NAME}|g" ${ECS_TASK_DEFINITION}
          
          cat ${ECS_TASK_DEFINITION}

      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${ECS_TASK_DEFINITION} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=${TASK_DEF_ARN}" >> $GITHUB_ENV
          echo "task-definition-arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT

      - name: Get VPC and subnet information
        run: |
          # 기본 VPC와 서브넷 가져오기
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=isDefault,Values=true" --query 'Vpcs[0].VpcId' --output text)
          
          # 퍼블릭 서브넷만 필터링 (인터넷 게이트웨이로 라우팅되는 서브넷)
          echo "Finding public subnets in VPC ${VPC_ID}..."
          SUBNET_IDS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=${VPC_ID}" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
          
          # 서브넷이 없으면 모든 서브넷 사용
          if [ -z "$SUBNET_IDS" ]; then
            echo "No public subnets found, using all subnets in VPC..."
            SUBNET_IDS=$(aws ec2 describe-subnets \
              --filters "Name=vpc-id,Values=${VPC_ID}" \
              --query 'Subnets[*].SubnetId' --output text | tr '\t' ',')
          fi
          
          echo "Using VPC: ${VPC_ID}"
          echo "Using Subnets: ${SUBNET_IDS}"
          echo "VPC_ID=${VPC_ID}" >> $GITHUB_ENV
          echo "SUBNET_IDS=${SUBNET_IDS}" >> $GITHUB_ENV
          
          # 보안 그룹 생성 또는 업데이트
          SECURITY_GROUP_NAME="ecs-sharp-server-sg"
          SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --filters "Name=group-name,Values=${SECURITY_GROUP_NAME}" --query "SecurityGroups[0].GroupId" --output text)
          if [ "$SECURITY_GROUP_ID" = "None" ] || [ -z "$SECURITY_GROUP_ID" ]; then
            echo "Creating security group: ${SECURITY_GROUP_NAME}"
            SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name ${SECURITY_GROUP_NAME} --description "Security group for ${ECS_SERVICE}" --vpc-id ${VPC_ID} --query "GroupId" --output text)
            
            # 인바운드 규칙 추가 (포트 3000, 80, 443)
            aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 3000 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
            aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 443 --cidr 0.0.0.0/0
            echo "Added inbound rules for ports 3000, 80, and 443"
          else
            echo "Using existing security group: ${SECURITY_GROUP_ID}"
            
            # 기존 보안 그룹에 인바운드 규칙이 있는지 확인하고 없으면 추가
            HTTP_RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids ${SECURITY_GROUP_ID} --query "SecurityGroups[0].IpPermissions[?ToPort==\`80\`]" --output text)
            if [ -z "$HTTP_RULE_EXISTS" ]; then
              aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 80 --cidr 0.0.0.0/0
              echo "Added inbound rule for port 80"
            fi
            
            HTTPS_RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids ${SECURITY_GROUP_ID} --query "SecurityGroups[0].IpPermissions[?ToPort==\`443\`]" --output text)
            if [ -z "$HTTPS_RULE_EXISTS" ]; then
              aws ec2 authorize-security-group-ingress --group-id ${SECURITY_GROUP_ID} --protocol tcp --port 443 --cidr 0.0.0.0/0
              echo "Added inbound rule for port 443"
            fi
          fi
          
          # 보안 그룹 ID를 환경 변수로 저장
          echo "SECURITY_GROUP_ID=${SECURITY_GROUP_ID}" >> $GITHUB_ENV
          
          # 대상 그룹 생성 또는 업데이트
          TARGET_GROUP_NAME="sharp-server-tg"
          TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups --names ${TARGET_GROUP_NAME} --query "TargetGroups[0].TargetGroupArn" --output text 2>/dev/null || echo "")
          if [ "$TARGET_GROUP_ARN" = "None" ] || [ -z "$TARGET_GROUP_ARN" ]; then
            echo "Creating target group: ${TARGET_GROUP_NAME}"
            TARGET_GROUP_ARN=$(aws elbv2 create-target-group \
              --name ${TARGET_GROUP_NAME} \
              --protocol TCP \
              --port 80 \
              --vpc-id ${VPC_ID} \
              --target-type ip \
              --health-check-protocol HTTP \
              --health-check-path /health \
              --health-check-port 80 \
              --health-check-interval-seconds 30 \
              --health-check-timeout-seconds 10 \
              --healthy-threshold-count 3 \
              --unhealthy-threshold-count 3 \
              --query "TargetGroups[0].TargetGroupArn" \
              --output text)
            
            # 대상 그룹 속성 설정
            aws elbv2 modify-target-group-attributes \
              --target-group-arn ${TARGET_GROUP_ARN} \
              --attributes Key=deregistration_delay.timeout_seconds,Value=30
            
            echo "Created target group: ${TARGET_GROUP_ARN}"
          else
            echo "Using existing target group: ${TARGET_GROUP_ARN}"
            
            # 기존 대상 그룹의 헬스 체크 설정 업데이트
            echo "Attempting to update health check settings for target group..."
            if aws elbv2 modify-target-group \
              --target-group-arn ${TARGET_GROUP_ARN} \
              --health-check-protocol HTTP \
              --health-check-path /health \
              --health-check-port 80 \
              --health-check-interval-seconds 30 \
              --health-check-timeout-seconds 10 \
              --healthy-threshold-count 3 \
              --unhealthy-threshold-count 3; then
              echo "Successfully updated health check settings for target group"
            else
              echo "Warning: Failed to update target group settings. This may be due to insufficient permissions."
              echo "Continuing with deployment using existing target group settings."
            fi
          fi
          
          # 대상 그룹 ARN을 환경 변수로 저장
          echo "TARGET_GROUP_ARN=${TARGET_GROUP_ARN}" >> $GITHUB_ENV
          
          # NLB 생성 또는 업데이트
          LOAD_BALANCER_NAME="sharp-server-nlb"
          LOAD_BALANCER_ARN=$(aws elbv2 describe-load-balancers --names ${LOAD_BALANCER_NAME} --query "LoadBalancers[0].LoadBalancerArn" --output text 2>/dev/null || echo "")
          if [ "$LOAD_BALANCER_ARN" = "None" ] || [ -z "$LOAD_BALANCER_ARN" ]; then
            echo "Creating Network Load Balancer: ${LOAD_BALANCER_NAME}"
            LOAD_BALANCER_ARN=$(aws elbv2 create-load-balancer \
              --name ${LOAD_BALANCER_NAME} \
              --type network \
              --subnets ${SUBNET_IDS} \
              --query "LoadBalancers[0].LoadBalancerArn" \
              --output text)
            echo "Created Network Load Balancer: ${LOAD_BALANCER_ARN}"
          else
            echo "Using existing Network Load Balancer: ${LOAD_BALANCER_ARN}"
          fi
          
          # 로드 밸런서 ARN을 환경 변수로 저장
          echo "LOAD_BALANCER_ARN=${LOAD_BALANCER_ARN}" >> $GITHUB_ENV
          
          # HTTP 리스너(80 포트) 생성 또는 확인
          HTTP_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn ${LOAD_BALANCER_ARN} --query "Listeners[?Port==\`80\`].ListenerArn" --output text 2>/dev/null || echo "")
          if [ "$HTTP_LISTENER_ARN" = "None" ] || [ -z "$HTTP_LISTENER_ARN" ]; then
            echo "Creating HTTP listener on port 80"
            HTTP_LISTENER_ARN=$(aws elbv2 create-listener \
              --load-balancer-arn ${LOAD_BALANCER_ARN} \
              --protocol TCP \
              --port 80 \
              --default-actions Type=forward,TargetGroupArn=${TARGET_GROUP_ARN} \
              --query "Listeners[0].ListenerArn" \
              --output text)
            echo "Created HTTP listener: ${HTTP_LISTENER_ARN}"
          else
            echo "Using existing HTTP listener: ${HTTP_LISTENER_ARN}"
          fi
          
          # HTTPS 리스너(443 포트) 생성 또는 확인
          HTTPS_LISTENER_ARN=$(aws elbv2 describe-listeners --load-balancer-arn ${LOAD_BALANCER_ARN} --query "Listeners[?Port==\`443\`].ListenerArn" --output text 2>/dev/null || echo "")
          if [ "$HTTPS_LISTENER_ARN" = "None" ] || [ -z "$HTTPS_LISTENER_ARN" ]; then
            echo "Creating HTTPS listener on port 443"
            HTTPS_LISTENER_ARN=$(aws elbv2 create-listener \
              --load-balancer-arn ${LOAD_BALANCER_ARN} \
              --protocol TCP \
              --port 443 \
              --default-actions Type=forward,TargetGroupArn=${TARGET_GROUP_ARN} \
              --query "Listeners[0].ListenerArn" \
              --output text)
            echo "Created HTTPS listener: ${HTTPS_LISTENER_ARN}"
          else
            echo "Using existing HTTPS listener: ${HTTPS_LISTENER_ARN}"
          fi
          
          # NLB DNS 이름 가져오기
          NLB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns ${LOAD_BALANCER_ARN} --query "LoadBalancers[0].DNSName" --output text)
          echo "NLB DNS Name: ${NLB_DNS_NAME}"
          echo "NLB_DNS_NAME=${NLB_DNS_NAME}" >> $GITHUB_ENV

      - name: Create or update ECS service
        run: |
          # 클러스터 존재 여부 다시 확인
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${ECS_CLUSTER} --query 'clusters[0].clusterName' --output text 2>/dev/null || echo "")
          
          if [ "$CLUSTER_EXISTS" == "None" ] || [ -z "$CLUSTER_EXISTS" ]; then
            echo "Error: ECS cluster ${ECS_CLUSTER} does not exist. Creating it now..."
            aws ecs create-cluster --cluster-name ${ECS_CLUSTER}
          fi
          
          # 서비스 상태 확인 및 처리
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --query 'services[0].status' --output text 2>/dev/null || echo "INACTIVE")
          
          echo "Current service status: ${SERVICE_STATUS}"
          
          # 서비스가 존재하고 ACTIVE 상태인 경우에만 업데이트 또는 삭제 시도
          if [ "$SERVICE_STATUS" == "ACTIVE" ]; then
            echo "Stopping existing ECS service..."
            aws ecs update-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --desired-count 0 || true
            
            echo "Waiting for tasks to stop..."
            sleep 30
            
            echo "Deleting existing ECS service..."
            aws ecs delete-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force || true
            
            # 서비스가 삭제될 때까지 대기
            echo "Waiting for service to be deleted..."
            sleep 60
          elif [ "$SERVICE_STATUS" == "DRAINING" ]; then
            echo "Service is in DRAINING state. Waiting for it to complete..."
            
            # DRAINING 상태의 서비스가 완전히 종료될 때까지 기다림
            MAX_ATTEMPTS=10
            ATTEMPT=0
            
            while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
              ATTEMPT=$((ATTEMPT+1))
              echo "Checking service status (attempt $ATTEMPT of $MAX_ATTEMPTS)..."
              
              # 서비스 상태 확인
              CURRENT_STATUS=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --query 'services[0].status' --output text 2>/dev/null || echo "INACTIVE")
              
              if [ "$CURRENT_STATUS" == "INACTIVE" ] || [ "$CURRENT_STATUS" == "None" ]; then
                echo "Service is now inactive. Proceeding..."
                break
              fi
              
              # 서비스가 여전히 DRAINING 상태인 경우 강제 삭제 시도
              if [ $ATTEMPT -ge 5 ]; then
                echo "Service is still in $CURRENT_STATUS state after multiple attempts. Trying to force delete..."
                aws ecs delete-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force || true
              fi
              
              echo "Service is still in $CURRENT_STATUS state. Waiting 30 seconds..."
              sleep 10
            done
            
            if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
              echo "Warning: Service could not be fully deleted after $MAX_ATTEMPTS attempts."
              echo "Will attempt to create new service anyway..."
            fi
          elif [ "$SERVICE_STATUS" != "INACTIVE" ] && [ "$SERVICE_STATUS" != "None" ]; then
            echo "Service is in ${SERVICE_STATUS} state. Waiting for it to complete..."
            sleep 30
          fi
          
          # 서비스가 존재하는지 다시 확인
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} --query 'services[0].status' --output text 2>/dev/null || echo "INACTIVE")
          
          if [ "$SERVICE_EXISTS" != "INACTIVE" ] && [ "$SERVICE_EXISTS" != "None" ]; then
            echo "Service still exists in ${SERVICE_EXISTS} state. Trying to force delete..."
            aws ecs delete-service --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE} --force || true
            sleep 60
          fi
          
          # 유효한 서브넷 사용
          echo "Using valid subnets for ECS service: ${SUBNET_IDS}"
          
          # 대상 그룹 ARN 확인
          echo "Target Group ARN: ${TARGET_GROUP_ARN}"
          if [ -z "${TARGET_GROUP_ARN}" ]; then
            echo "Error: Target Group ARN is empty. Cannot create service without target group."
            exit 1
          fi
          
          # 컨테이너 이름 확인
          echo "Container Name: ${CONTAINER_NAME}"
          if [ -z "${CONTAINER_NAME}" ]; then
            echo "Error: Container Name is empty."
            exit 1
          fi
          
          # 새 서비스 생성 (로드 밸런서와 연결)
          echo "Creating new ECS service with load balancer..."
          echo "Debug info:"
          echo "- Cluster: ${ECS_CLUSTER}"
          echo "- Service: ${ECS_SERVICE}"
          echo "- Task Definition: ${TASK_DEF_ARN}"
          echo "- Target Group ARN: ${TARGET_GROUP_ARN}"
          echo "- Container Name: ${CONTAINER_NAME}"
          echo "- Security Group: ${SECURITY_GROUP_ID}"
          echo "- Subnets: ${SUBNET_IDS}"
          
          aws ecs create-service \
            --cluster ${ECS_CLUSTER} \
            --service-name ${ECS_SERVICE} \
            --task-definition ${TASK_DEF_ARN} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${SUBNET_IDS}],securityGroups=[${SECURITY_GROUP_ID}],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=${TARGET_GROUP_ARN},containerName=${CONTAINER_NAME},containerPort=80" \
            --scheduling-strategy REPLICA
          
          # 서비스 안정화 대기
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster ${ECS_CLUSTER} --services ${ECS_SERVICE} || true

      - name: Get service details
        if: success()
        run: |
          # 서비스 세부 정보 가져오기
          TASK_ARN=$(aws ecs list-tasks --cluster ${ECS_CLUSTER} --service-name ${ECS_SERVICE} --query 'taskArns[0]' --output text)
          
          if [ ! -z "$TASK_ARN" ] && [ "$TASK_ARN" != "None" ]; then
            echo "Task ARN: ${TASK_ARN}"
            
            # 태스크 상태 확인
            TASK_STATUS=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks ${TASK_ARN} --query 'tasks[0].lastStatus' --output text)
            echo "Task Status: ${TASK_STATUS}"
            
            # 태스크 실패 이유 확인
            TASK_STOPPED_REASON=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks ${TASK_ARN} --query 'tasks[0].stoppedReason' --output text)
            if [ ! -z "$TASK_STOPPED_REASON" ] && [ "$TASK_STOPPED_REASON" != "None" ]; then
              echo "Task Stopped Reason: ${TASK_STOPPED_REASON}"
            fi
            
            # 컨테이너 상태 확인
            CONTAINER_STATUS=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks ${TASK_ARN} --query 'tasks[0].containers[0].lastStatus' --output text)
            echo "Container Status: ${CONTAINER_STATUS}"
            
            # 컨테이너 실패 이유 확인
            CONTAINER_REASON=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks ${TASK_ARN} --query 'tasks[0].containers[0].reason' --output text)
            if [ ! -z "$CONTAINER_REASON" ] && [ "$CONTAINER_REASON" != "None" ]; then
              echo "Container Reason: ${CONTAINER_REASON}"
            fi
            
            # 네트워크 인터페이스 확인
            ENI_ID=$(aws ecs describe-tasks --cluster ${ECS_CLUSTER} --tasks ${TASK_ARN} --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            
            if [ ! -z "$ENI_ID" ] && [ "$ENI_ID" != "None" ]; then
              PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids ${ENI_ID} --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
              echo "Service is running at: http://${PUBLIC_IP}:3000"
            else
              echo "Could not find network interface for task"
            fi
          else
            echo "No tasks found for service"
          fi
          
          # NLB DNS 정보 출력
          if [ ! -z "$NLB_DNS_NAME" ]; then
            echo "Service is accessible via Network Load Balancer: http://${NLB_DNS_NAME}"
          fi

      - name: Post-deployment notification
        if: success()
        run: |
          echo "Deployment to ECS completed successfully!" 