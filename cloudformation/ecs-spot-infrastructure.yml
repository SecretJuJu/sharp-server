AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS Cluster with Spot Instances for Sharp Server Application'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the ECS cluster will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnets where the ECS cluster will be deployed

  DesiredCapacity:
    Type: Number
    Default: 0
    Description: Desired number of instances in the Auto Scaling Group

  MaxSize:
    Type: Number
    Default: 2
    Description: Maximum number of instances in the Auto Scaling Group

  MinSize:
    Type: Number
    Default: 0
    Description: Minimum number of instances in the Auto Scaling Group

  InstanceType:
    Type: String
    Default: t4g.small
    Description: EC2 instance type (ARM64 based)
    AllowedValues:
      - t4g.micro
      - t4g.small
      - t4g.medium
      - c6g.large

  CertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the custom domain
    Default: ''

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: sharp-server-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - SharpServerASGCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
        - CapacityProvider: SharpServerASGCapacityProvider
          Weight: 1

  # EFS File System for persistent storage
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: SharpServerEFS

  # EFS Mount Targets
  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups:
        - !Ref EFSSecurityGroup
      SubnetId: !Select [0, !Ref SubnetIds]

  # Security Group for EFS
  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ECSSecurityGroup

  # Security Group for ECS Tasks
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # IAM Role for ECS Tasks
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEFS-FullAccess

  # Auto Scaling Group for Spot Instances
  SpotAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref SpotLaunchTemplate
        Version: !GetAtt SpotLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      Tags:
        - Key: Name
          Value: SharpServerSpotInstance
          PropagateAtLaunch: true
        - Key: AmazonECSManaged
          Value: ''
          PropagateAtLaunch: true

  # Launch Template for Spot Instances
  SpotLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: SharpServerSpotLaunchTemplate
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        ImageId: '{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id}}'
        SecurityGroupIds:
          - !Ref ECSSecurityGroup
        IamInstanceProfile:
          Name: !Ref ECSInstanceProfile
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            SpotInstanceType: one-time
            InstanceInterruptionBehavior: terminate
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            echo ECS_ENABLE_SPOT_INSTANCE_DRAINING=true >> /etc/ecs/ecs.config
            yum install -y amazon-efs-utils
            mkdir -p /mnt/efs
            mount -t efs ${EFSFileSystem}:/ /mnt/efs

  # IAM Instance Profile for ECS Instances
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ECSInstanceRole

  # IAM Role for ECS Instances
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # Capacity Provider for ECS
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: SharpServerASGCapacityProvider
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref SpotAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
          MinimumScalingStepSize: 1
          MaximumScalingStepSize: 1
          InstanceWarmupPeriod: 300
        ManagedTerminationProtection: DISABLED

  # Network Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: SharpServerNLB

  # Target Group for Load Balancer
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: TCP
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: '3000'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'

  # Listener for Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: TCP

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: 
      - EFSMountTarget
      - Listener
    Properties:
      ServiceName: sharp-server-service
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      EnableExecuteCommand: true
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
          Base: 0
        - CapacityProvider: SharpServerASGCapacityProvider
          Weight: 1
          Base: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: sharp-server
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: sharp-server
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
        - EC2
      Cpu: '512'
      Memory: '1024'
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: sharp-server
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/sharp-server:latest
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
          MountPoints:
            - SourceVolume: uploads
              ContainerPath: /app/uploads
              ReadOnly: false
      Volumes:
        - Name: uploads
          EFSVolumeConfiguration:
            FileSystemId: !Ref EFSFileSystem
            RootDirectory: /

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/sharp-server
      RetentionInDays: 30

  # Auto Scaling Policy for ECS Service
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: SharpServerScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  # Scalable Target for ECS Service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 0
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService

  # API Gateway HTTP API
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: SharpServerApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization

  # VPC Link for API Gateway
  VpcLink:
    Type: AWS::ApiGatewayV2::VpcLink
    Properties:
      Name: SharpServerVpcLink
      SubnetIds: !Ref SubnetIds
      SecurityGroupIds:
        - !Ref ECSSecurityGroup

  # API Gateway Integration
  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener/${LoadBalancer.LoadBalancerFullName}/*/
      ConnectionType: VPC_LINK
      ConnectionId: !Ref VpcLink
      PayloadFormatVersion: '1.0'

  # API Gateway Route
  ApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /{proxy+}'
      Target: !Sub integrations/${ApiIntegration}

  # API Gateway Stage
  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: $default
      AutoDeploy: true

  # API Gateway Custom Domain (Conditional)
  ApiCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: HasCertificate
    Properties:
      DomainName: sharp.secretjuju.kr
      DomainNameConfigurations:
        - CertificateArn: !Ref CertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  # API Gateway API Mapping (Conditional)
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: HasCertificate
    Properties:
      ApiId: !Ref ApiGateway
      DomainName: !Ref ApiCustomDomain
      Stage: !Ref ApiStage

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Outputs:
  ECSCluster:
    Description: ECS Cluster
    Value: !Ref ECSCluster

  ECSService:
    Description: ECS Service
    Value: !GetAtt ECSService.Name

  EFSFileSystem:
    Description: EFS File System ID
    Value: !Ref EFSFileSystem

  TaskExecutionRole:
    Description: Task Execution Role ARN
    Value: !GetAtt ECSTaskExecutionRole.Arn

  TaskRole:
    Description: Task Role ARN
    Value: !GetAtt ECSTaskRole.Arn
    
  LoadBalancerDNS:
    Description: Load Balancer DNS Name
    Value: !GetAtt LoadBalancer.DNSName
    
  ApiGatewayURL:
    Description: API Gateway URL
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com
    
  ApiGatewayId:
    Description: API Gateway ID
    Value: !Ref ApiGateway
    
  CustomDomainName:
    Description: Custom Domain Name (if certificate provided)
    Condition: HasCertificate
    Value: sharp.secretjuju.kr 